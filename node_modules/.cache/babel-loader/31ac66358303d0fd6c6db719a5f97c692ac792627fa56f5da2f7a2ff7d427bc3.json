{"ast":null,"code":"/**\r\n * ****************************************************************************\r\n * @description     :   Create store will use by redux\r\n * @created at      :   2020/12/03\r\n * @created by      :   QuyPN - quy.pham@toploop.co\r\n * @package         :   dashlite-admin-react\r\n * @copyright       :   Copyright (c) TOPLOOP\r\n * @version         :   1.0.0\r\n * ****************************************************************************\r\n */\n\n/**\r\n * import libraries\r\n */\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware, { END } from 'redux-saga';\n\n/**\r\n * import reducer and middleware for store\r\n */\nimport rootReducer from './root-reducer';\nimport rootSaga from './root-saga';\n\n/**\r\n * Creates a Redux middleware and connects the Sagas to the Redux Store\r\n */\nconst sagaMiddleware = createSagaMiddleware();\n\n/**\r\n * Apply middleware to store\r\n * -----------------------------------------\r\n * @author : QuyPN - 2020/12/03 - create\r\n * @param  : {Object} middleware - Functions to create redux middleware\r\n * @returns: {function} - Function to apply middleware to store\r\n * @access : public\r\n */\nconst bindMiddleware = middleware => {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line global-require\n    const {\n      composeWithDevTools\n    } = require('redux-devtools-extension');\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n  return applyMiddleware(...middleware);\n};\n\n/**\r\n * Ceeate store with reducer and middleware\r\n * -----------------------------------------\r\n * @author : QuyPN - 2020/12/03 - create\r\n * @param  : {Object} - Current state of system\r\n * @returns: {Object} - store of system\r\n * @access : public\r\n */\nfunction initStore() {\n  let initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  /**\r\n  * store of system\r\n  */\n  const store = createStore(rootReducer, initialState, bindMiddleware([sagaMiddleware]));\n\n  /**\r\n  * If saga not running then run saga\r\n  * -----------------------------------------\r\n  * @author : QuyPN - 2020/12/03 - create\r\n  * @access : public\r\n  */\n  store.runSaga = () => {\n    // Avoid running twice\n    if (store.saga) {\n      return;\n    }\n    store.saga = sagaMiddleware.run(rootSaga);\n  };\n\n  /**\r\n  * If saga not running then stop saga\r\n  * -----------------------------------------\r\n  * @author : QuyPN - 2020/12/03 - create\r\n  * @access : public\r\n  */\n  store.stopSaga = async () => {\n    // Avoid running twice\n    if (!store.saga) {\n      return;\n    }\n    store.dispatch(END);\n    await store.saga.done;\n    store.saga = null;\n  };\n\n  /**\r\n  * Exec a saga process on a thread\r\n  * -----------------------------------------\r\n  * @author : QuyPN - 2020/12/03 - create\r\n  * @param  : {bool} isServer - saga is running on server or on client\r\n  * @param  : {function} tasks - thread to run saga\r\n  * @access : public\r\n  */\n  store.execSagaTasks = async (isServer, tasks) => {\n    // run saga\n    store.runSaga();\n    // dispatch saga tasks\n    tasks(store.dispatch);\n    // Stop running and wait for the tasks to be done\n    await store.stopSaga();\n    // Re-run on client side\n    if (!isServer) {\n      store.runSaga();\n    }\n  };\n\n  // Initial run\n  store.runSaga();\n  return store;\n}\nexport default initStore;","map":{"version":3,"names":["createStore","applyMiddleware","createSagaMiddleware","END","rootReducer","rootSaga","sagaMiddleware","bindMiddleware","middleware","process","env","NODE_ENV","composeWithDevTools","require","initStore","initialState","arguments","length","undefined","store","runSaga","saga","run","stopSaga","dispatch","done","execSagaTasks","isServer","tasks"],"sources":["/Users/user/Documents/DUY IT/S0002/news002/news002/src/redux/store.js"],"sourcesContent":["/**\r\n * ****************************************************************************\r\n * @description     :   Create store will use by redux\r\n * @created at      :   2020/12/03\r\n * @created by      :   QuyPN - quy.pham@toploop.co\r\n * @package         :   dashlite-admin-react\r\n * @copyright       :   Copyright (c) TOPLOOP\r\n * @version         :   1.0.0\r\n * ****************************************************************************\r\n */\r\n\r\n/**\r\n * import libraries\r\n */\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport createSagaMiddleware, { END } from 'redux-saga'\r\n\r\n/**\r\n * import reducer and middleware for store\r\n */\r\nimport rootReducer from './root-reducer'\r\nimport rootSaga from './root-saga'\r\n\r\n/**\r\n * Creates a Redux middleware and connects the Sagas to the Redux Store\r\n */\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\n/**\r\n * Apply middleware to store\r\n * -----------------------------------------\r\n * @author : QuyPN - 2020/12/03 - create\r\n * @param  : {Object} middleware - Functions to create redux middleware\r\n * @returns: {function} - Function to apply middleware to store\r\n * @access : public\r\n */\r\nconst bindMiddleware = (middleware) => {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        // eslint-disable-next-line global-require\r\n        const { composeWithDevTools } = require('redux-devtools-extension')\r\n        return composeWithDevTools(applyMiddleware(...middleware))\r\n    }\r\n    return applyMiddleware(...middleware)\r\n}\r\n\r\n/**\r\n * Ceeate store with reducer and middleware\r\n * -----------------------------------------\r\n * @author : QuyPN - 2020/12/03 - create\r\n * @param  : {Object} - Current state of system\r\n * @returns: {Object} - store of system\r\n * @access : public\r\n */\r\nfunction initStore (initialState = {}) {\r\n    /**\r\n   * store of system\r\n   */\r\n    const store = createStore(\r\n        rootReducer,\r\n        initialState,\r\n        bindMiddleware([sagaMiddleware]),\r\n    )\r\n\r\n    /**\r\n   * If saga not running then run saga\r\n   * -----------------------------------------\r\n   * @author : QuyPN - 2020/12/03 - create\r\n   * @access : public\r\n   */\r\n    store.runSaga = () => {\r\n        // Avoid running twice\r\n        if (store.saga) { return }\r\n        store.saga = sagaMiddleware.run(rootSaga)\r\n    }\r\n\r\n    /**\r\n   * If saga not running then stop saga\r\n   * -----------------------------------------\r\n   * @author : QuyPN - 2020/12/03 - create\r\n   * @access : public\r\n   */\r\n    store.stopSaga = async () => {\r\n        // Avoid running twice\r\n        if (!store.saga) { return }\r\n        store.dispatch(END)\r\n        await store.saga.done\r\n        store.saga = null\r\n    }\r\n\r\n    /**\r\n   * Exec a saga process on a thread\r\n   * -----------------------------------------\r\n   * @author : QuyPN - 2020/12/03 - create\r\n   * @param  : {bool} isServer - saga is running on server or on client\r\n   * @param  : {function} tasks - thread to run saga\r\n   * @access : public\r\n   */\r\n    store.execSagaTasks = async (isServer, tasks) => {\r\n        // run saga\r\n        store.runSaga()\r\n        // dispatch saga tasks\r\n        tasks(store.dispatch)\r\n        // Stop running and wait for the tasks to be done\r\n        await store.stopSaga()\r\n        // Re-run on client side\r\n        if (!isServer) {\r\n            store.runSaga()\r\n        }\r\n    }\r\n\r\n    // Initial run\r\n    store.runSaga()\r\n\r\n    return store\r\n}\r\n\r\nexport default initStore\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAASA,WAAW,EAAEC,eAAe,QAAQ,OAAO;AACpD,OAAOC,oBAAoB,IAAIC,GAAG,QAAQ,YAAY;;AAEtD;AACA;AACA;AACA,OAAOC,WAAW,MAAM,gBAAgB;AACxC,OAAOC,QAAQ,MAAM,aAAa;;AAElC;AACA;AACA;AACA,MAAMC,cAAc,GAAGJ,oBAAoB,CAAC,CAAC;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMK,cAAc,GAAIC,UAAU,IAAK;EACnC,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACvC;IACA,MAAM;MAAEC;IAAoB,CAAC,GAAGC,OAAO,CAAC,0BAA0B,CAAC;IACnE,OAAOD,mBAAmB,CAACX,eAAe,CAAC,GAAGO,UAAU,CAAC,CAAC;EAC9D;EACA,OAAOP,eAAe,CAAC,GAAGO,UAAU,CAAC;AACzC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASM,SAASA,CAAA,EAAqB;EAAA,IAAnBC,YAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EACjC;AACJ;AACA;EACI,MAAMG,KAAK,GAAGnB,WAAW,CACrBI,WAAW,EACXW,YAAY,EACZR,cAAc,CAAC,CAACD,cAAc,CAAC,CACnC,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;EACIa,KAAK,CAACC,OAAO,GAAG,MAAM;IAClB;IACA,IAAID,KAAK,CAACE,IAAI,EAAE;MAAE;IAAO;IACzBF,KAAK,CAACE,IAAI,GAAGf,cAAc,CAACgB,GAAG,CAACjB,QAAQ,CAAC;EAC7C,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;EACIc,KAAK,CAACI,QAAQ,GAAG,YAAY;IACzB;IACA,IAAI,CAACJ,KAAK,CAACE,IAAI,EAAE;MAAE;IAAO;IAC1BF,KAAK,CAACK,QAAQ,CAACrB,GAAG,CAAC;IACnB,MAAMgB,KAAK,CAACE,IAAI,CAACI,IAAI;IACrBN,KAAK,CAACE,IAAI,GAAG,IAAI;EACrB,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIF,KAAK,CAACO,aAAa,GAAG,OAAOC,QAAQ,EAAEC,KAAK,KAAK;IAC7C;IACAT,KAAK,CAACC,OAAO,CAAC,CAAC;IACf;IACAQ,KAAK,CAACT,KAAK,CAACK,QAAQ,CAAC;IACrB;IACA,MAAML,KAAK,CAACI,QAAQ,CAAC,CAAC;IACtB;IACA,IAAI,CAACI,QAAQ,EAAE;MACXR,KAAK,CAACC,OAAO,CAAC,CAAC;IACnB;EACJ,CAAC;;EAED;EACAD,KAAK,CAACC,OAAO,CAAC,CAAC;EAEf,OAAOD,KAAK;AAChB;AAEA,eAAeL,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}