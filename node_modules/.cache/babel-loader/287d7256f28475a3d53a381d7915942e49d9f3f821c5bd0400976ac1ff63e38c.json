{"ast":null,"code":"import { all, call, fork, put, takeEvery } from '@redux-saga/core/effects';\nimport actions from './action';\nimport factories from './factory';\nfunction* watchGetData() {\n  yield takeEvery(actions.FETCH_GET_DATA, function* (payload) {\n    try {\n      const response = yield call(() => factories.fetchSupplier(payload));\n      yield put({\n        type: actions.FETCH_GET_DATA_SUCCESS,\n        payload: response.data\n      });\n    } catch (error) {} finally {}\n  });\n}\nfunction* watchGetUpdateData() {\n  yield takeEvery(actions.FETCH_UPDATE_DATA, function* (payload) {\n    try {\n      const response = yield call(() => factories.updateSupplier(payload));\n      console.log(response);\n      yield put({\n        type: actions.FETCH_UPDATE_DATA_SUCCESS,\n        payload: response.data\n      });\n    } catch (error) {} finally {}\n  });\n}\nfunction* watchPUTSTATUSData() {\n  yield takeEvery(actions.FETCH_PUTSATUS_DATA, function* (payload) {\n    try {\n      const response = yield call(() => factories.putstatussupplier(payload));\n      //  console.log(response.data);\n      yield put({\n        type: actions.FETCH_PUTSATUS_DATA_SUCCESS,\n        payload: response.data\n      });\n    } catch (error) {} finally {}\n  });\n}\nfunction* watchPUTDataid() {\n  yield takeEvery(actions.FETCH_GET_DATA_ID, function* (payload) {\n    try {\n      const response = yield call(() => factories.putgetdataid(payload));\n      yield put({\n        type: actions.FETCH_GET_DATA_ID_SUCCESS,\n        payload: response.data\n      });\n    } catch (error) {} finally {}\n  });\n}\nfunction* watchaddposstdata() {\n  yield takeEvery(actions.FETCH_ADD_DATA, function* (payload) {\n    try {\n      const response = yield call(() => factories.postaddgetdata(payload));\n      // console.log(response.data);\n      yield put({\n        type: actions.FETCH_ADD_DATA_SUCCESS,\n        payload: response.data\n      });\n    } catch (error) {} finally {}\n  });\n}\nfunction* watchdeleteposstdata() {\n  yield takeEvery(actions.FETCH_POSTDELETE_DATA, function* (payload) {\n    try {\n      const response = yield call(() => factories.postdeletegetdata(payload));\n      //  console.log(response.data);\n      yield put({\n        type: actions.FETCH_POSTDELETE_DATA_SUCCESS,\n        payload: response.data\n      });\n    } catch (error) {} finally {}\n  });\n}\nfunction* watchsearchpostdata() {\n  yield takeEvery(actions.FETCH_GETSEARCH_DATA, function* (payload) {\n    try {\n      const response = yield call(() => factories.postsearchpostdata(payload));\n      console.log(response.search);\n      yield put({\n        type: actions.FETCH_GETSEARCH_DATA_SUCCESS,\n        payload: response.search\n      });\n    } catch (error) {} finally {}\n  });\n}\nexport default function* AppSupplier() {\n  yield all([fork(watchGetData), fork(watchGetUpdateData), fork(watchPUTSTATUSData), fork(watchPUTDataid), fork(watchaddposstdata), fork(watchdeleteposstdata), fork(watchsearchpostdata)]);\n}\n_c = AppSupplier;\nvar _c;\n$RefreshReg$(_c, \"AppSupplier\");","map":{"version":3,"names":["all","call","fork","put","takeEvery","actions","factories","watchGetData","FETCH_GET_DATA","payload","response","fetchSupplier","type","FETCH_GET_DATA_SUCCESS","data","error","watchGetUpdateData","FETCH_UPDATE_DATA","updateSupplier","console","log","FETCH_UPDATE_DATA_SUCCESS","watchPUTSTATUSData","FETCH_PUTSATUS_DATA","putstatussupplier","FETCH_PUTSATUS_DATA_SUCCESS","watchPUTDataid","FETCH_GET_DATA_ID","putgetdataid","FETCH_GET_DATA_ID_SUCCESS","watchaddposstdata","FETCH_ADD_DATA","postaddgetdata","FETCH_ADD_DATA_SUCCESS","watchdeleteposstdata","FETCH_POSTDELETE_DATA","postdeletegetdata","FETCH_POSTDELETE_DATA_SUCCESS","watchsearchpostdata","FETCH_GETSEARCH_DATA","postsearchpostdata","search","FETCH_GETSEARCH_DATA_SUCCESS","AppSupplier","_c","$RefreshReg$"],"sources":["/Users/user/Documents/DUY IT/S0002/news002/news002/src/redux/supplier/saga.js"],"sourcesContent":["import { all, call, fork, put, takeEvery } from '@redux-saga/core/effects';\r\nimport actions from './action';\r\nimport factories from './factory';\r\n\r\n\r\n\r\nfunction* watchGetData(){\r\n    yield takeEvery(actions.FETCH_GET_DATA, function* (payload){\r\n        try{\r\n            const response = yield call(()=>\r\n                factories.fetchSupplier(payload),\r\n            );\r\n           \r\n            yield put({\r\n                type: actions.FETCH_GET_DATA_SUCCESS,\r\n                payload:response.data,\r\n            })\r\n        }catch(error){\r\n\r\n        }finally{\r\n\r\n        }\r\n    });\r\n}\r\nfunction* watchGetUpdateData(){\r\n    yield takeEvery(actions.FETCH_UPDATE_DATA, function* (payload){\r\n        try{\r\n            const response = yield call(()=>\r\n                factories.updateSupplier(payload),\r\n                \r\n            );\r\n            console.log(response);\r\n            yield put({\r\n                type: actions.FETCH_UPDATE_DATA_SUCCESS,\r\n                payload:response.data,\r\n            })\r\n        }catch(error){\r\n\r\n        }finally{\r\n\r\n        }\r\n    });\r\n}\r\nfunction* watchPUTSTATUSData(){\r\n    yield takeEvery(actions.FETCH_PUTSATUS_DATA, function* (payload){\r\n        try{\r\n            const response = yield call(()=>\r\n                factories.putstatussupplier(payload),\r\n                \r\n            );\r\n          //  console.log(response.data);\r\n            yield put({\r\n                type: actions.FETCH_PUTSATUS_DATA_SUCCESS,\r\n                payload:response.data,\r\n            })\r\n        }catch(error){\r\n\r\n        }finally{\r\n\r\n        }\r\n    });\r\n}\r\nfunction* watchPUTDataid(){\r\n    yield takeEvery(actions.FETCH_GET_DATA_ID, function* (payload){\r\n        try{\r\n            const response = yield call(()=>\r\n                factories.putgetdataid(payload),\r\n                \r\n            );\r\n           \r\n            yield put({\r\n                type: actions.FETCH_GET_DATA_ID_SUCCESS,\r\n                payload:response.data,\r\n            })\r\n        }catch(error){\r\n\r\n        }finally{\r\n\r\n        }\r\n    });\r\n}\r\nfunction* watchaddposstdata(){\r\n    yield takeEvery(actions.FETCH_ADD_DATA, function* (payload){\r\n        try{\r\n            const response = yield call(()=>\r\n                factories.postaddgetdata(payload),\r\n                \r\n            );\r\n            // console.log(response.data);\r\n            yield put({\r\n                type: actions.FETCH_ADD_DATA_SUCCESS,\r\n                payload:response.data,\r\n            })\r\n        }catch(error){\r\n\r\n        }finally{\r\n\r\n        }\r\n    });\r\n}\r\nfunction* watchdeleteposstdata(){\r\n    yield takeEvery(actions.FETCH_POSTDELETE_DATA, function* (payload){\r\n        try{\r\n            const response = yield call(()=>\r\n                factories.postdeletegetdata(payload),\r\n                \r\n            );\r\n          //  console.log(response.data);\r\n            yield put({\r\n                type: actions.FETCH_POSTDELETE_DATA_SUCCESS,\r\n                payload:response.data,\r\n            })\r\n        }catch(error){\r\n\r\n        }finally{\r\n\r\n        }\r\n    });\r\n}\r\nfunction* watchsearchpostdata(){\r\n    yield takeEvery(actions.FETCH_GETSEARCH_DATA, function* (payload){\r\n        try{\r\n            const response = yield call(()=>\r\n                factories.postsearchpostdata(payload),\r\n                \r\n            );\r\n            console.log(response.search);\r\n            yield put({\r\n                type: actions.FETCH_GETSEARCH_DATA_SUCCESS,\r\n                payload:response.search,\r\n            })\r\n        }catch(error){\r\n\r\n        }finally{\r\n\r\n        }\r\n    });\r\n}\r\nexport default function* AppSupplier()\r\n{\r\n    yield all([\r\n        \r\n        fork(watchGetData),\r\n        fork(watchGetUpdateData),\r\n        fork(watchPUTSTATUSData),\r\n        fork(watchPUTDataid),\r\n        fork(watchaddposstdata),\r\n        fork(watchdeleteposstdata),\r\n        fork(watchsearchpostdata),\r\n    ]);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}