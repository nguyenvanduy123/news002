{"ast":null,"code":"import { all, call, fork, put, takeEvery } from '@redux-saga/core/effects';\nimport actions from './action';\nimport factories from './factory';\nfunction* watchProvince() {\n  yield takeEvery(actions.FETCH_GET_PROVINCE, function* (payload) {\n    try {\n      const response = yield call(() => factories.fetchSampleProvince(payload));\n      yield put({\n        type: actions.FETCH_GET_PROVINCE_SUCCESS,\n        payload: response\n      });\n    } catch (error) {} finally {}\n  });\n}\n// function* watchSample2()\n// {\n\n//     yield takeEvery(actions.FETCH_SAMPLE_2, function* (payload)\n//     {\n//         try {\n//             const response = yield call(() =>\n//                 factories.updateSample(payload),\n//             );\n//             yield put({\n//                 type: actions.FETCH_SAMPLE_2_SUCCESS,\n//                 payload: response.Data,\n//             });\n//         } catch (error) {\n\n//         } finally {\n//         }\n//     });\n// }\n\nexport default function* AppProvince() {\n  yield all([fork(watchProvince)]);\n}\n_c = AppProvince;\nvar _c;\n$RefreshReg$(_c, \"AppProvince\");","map":{"version":3,"names":["all","call","fork","put","takeEvery","actions","factories","watchProvince","FETCH_GET_PROVINCE","payload","response","fetchSampleProvince","type","FETCH_GET_PROVINCE_SUCCESS","error","AppProvince","_c","$RefreshReg$"],"sources":["/Users/user/Documents/DUY IT/S0002/news002/news002/src/redux/province/saga.js"],"sourcesContent":["import { all, call, fork, put, takeEvery } from '@redux-saga/core/effects';\r\nimport actions from './action';\r\nimport factories from './factory';\r\n\r\n\r\nfunction* watchProvince()\r\n{\r\n\r\n    yield takeEvery(actions.FETCH_GET_PROVINCE, function* (payload)\r\n    {\r\n        \r\n        try {\r\n            const response = yield call(() =>\r\n                factories.fetchSampleProvince(payload),\r\n            );\r\n           \r\n         \r\n          yield put({\r\n                type: actions.FETCH_GET_PROVINCE_SUCCESS,\r\n                payload: response,\r\n            });\r\n          \r\n        } catch (error) {\r\n\r\n        } finally {\r\n        }\r\n    });\r\n    \r\n}\r\n// function* watchSample2()\r\n// {\r\n   \r\n//     yield takeEvery(actions.FETCH_SAMPLE_2, function* (payload)\r\n//     {\r\n//         try {\r\n//             const response = yield call(() =>\r\n//                 factories.updateSample(payload),\r\n//             );\r\n//             yield put({\r\n//                 type: actions.FETCH_SAMPLE_2_SUCCESS,\r\n//                 payload: response.Data,\r\n//             });\r\n//         } catch (error) {\r\n\r\n//         } finally {\r\n//         }\r\n//     });\r\n// }\r\n\r\nexport default function* AppProvince()\r\n{\r\n    yield all([\r\n        fork(watchProvince),\r\n        \r\n    ]);\r\n}\r\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAEC,GAAG,EAAEC,SAAS,QAAQ,0BAA0B;AAC1E,OAAOC,OAAO,MAAM,UAAU;AAC9B,OAAOC,SAAS,MAAM,WAAW;AAGjC,UAAUC,aAAaA,CAAA,EACvB;EAEI,MAAMH,SAAS,CAACC,OAAO,CAACG,kBAAkB,EAAE,WAAWC,OAAO,EAC9D;IAEI,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMT,IAAI,CAAC,MACxBK,SAAS,CAACK,mBAAmB,CAACF,OAAO,CACzC,CAAC;MAGH,MAAMN,GAAG,CAAC;QACJS,IAAI,EAAEP,OAAO,CAACQ,0BAA0B;QACxCJ,OAAO,EAAEC;MACb,CAAC,CAAC;IAEN,CAAC,CAAC,OAAOI,KAAK,EAAE,CAEhB,CAAC,SAAS,CACV;EACJ,CAAC,CAAC;AAEN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,eAAe,UAAUC,WAAWA,CAAA,EACpC;EACI,MAAMf,GAAG,CAAC,CACNE,IAAI,CAACK,aAAa,CAAC,CAEtB,CAAC;AACN;AAACS,EAAA,GANwBD,WAAW;AAAA,IAAAC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}