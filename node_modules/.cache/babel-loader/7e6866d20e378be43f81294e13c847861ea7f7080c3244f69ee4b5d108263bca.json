{"ast":null,"code":"import { all, call, fork, put, takeEvery } from '@redux-saga/core/effects';\nimport actions from './action';\nimport factories from './factory';\nfunction* watchSample1() {\n  yield takeEvery(actions.FETCH_SAMPLE_1, function* (payload) {\n    try {\n      const response = yield call(() => factories.fetchSample(payload));\n      yield put({\n        type: actions.FETCH_SAMPLE_1_SUCCESS,\n        payload: response.Data\n      });\n    } catch (error) {} finally {}\n  });\n}\nfunction* watchSample2() {\n  yield takeEvery(actions.FETCH_SAMPLE_2, function* (payload) {\n    try {\n      const response = yield call(() => factories.updateSample(payload));\n      yield put({\n        type: actions.FETCH_SAMPLE_2_SUCCESS,\n        payload: response.Data\n      });\n    } catch (error) {} finally {}\n  });\n}\nexport default function* AppSaga() {\n  yield all([fork(watchSample1), fork(watchSample2)\n  // fork(watchGetData),\n  ]);\n}\n_c = AppSaga;\nvar _c;\n$RefreshReg$(_c, \"AppSaga\");","map":{"version":3,"names":["all","call","fork","put","takeEvery","actions","factories","watchSample1","FETCH_SAMPLE_1","payload","response","fetchSample","type","FETCH_SAMPLE_1_SUCCESS","Data","error","watchSample2","FETCH_SAMPLE_2","updateSample","FETCH_SAMPLE_2_SUCCESS","AppSaga","_c","$RefreshReg$"],"sources":["/Users/user/Documents/DUY IT/S0002/news002/news002/src/redux/app/saga.js"],"sourcesContent":["import { all, call, fork, put, takeEvery } from '@redux-saga/core/effects';\r\nimport actions from './action';\r\nimport factories from './factory';\r\n\r\n\r\nfunction* watchSample1()\r\n{\r\n\r\n    yield takeEvery(actions.FETCH_SAMPLE_1, function* (payload)\r\n    {\r\n        \r\n        try {\r\n            const response = yield call(() =>\r\n                factories.fetchSample(payload),\r\n            );\r\n\r\n            yield put({\r\n                type: actions.FETCH_SAMPLE_1_SUCCESS,\r\n                payload: response.Data,\r\n            });\r\n          \r\n        } catch (error) {\r\n\r\n        } finally {\r\n        }\r\n    });\r\n    \r\n}\r\nfunction* watchSample2()\r\n{\r\n   \r\n    yield takeEvery(actions.FETCH_SAMPLE_2, function* (payload)\r\n    {\r\n        try {\r\n            const response = yield call(() =>\r\n                factories.updateSample(payload),\r\n            );\r\n            yield put({\r\n                type: actions.FETCH_SAMPLE_2_SUCCESS,\r\n                payload: response.Data,\r\n            });\r\n        } catch (error) {\r\n\r\n        } finally {\r\n        }\r\n    });\r\n}\r\n\r\nexport default function* AppSaga()\r\n{\r\n    yield all([\r\n        fork(watchSample1),\r\n        fork(watchSample2),\r\n        // fork(watchGetData),\r\n    ]);\r\n}\r\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAEC,GAAG,EAAEC,SAAS,QAAQ,0BAA0B;AAC1E,OAAOC,OAAO,MAAM,UAAU;AAC9B,OAAOC,SAAS,MAAM,WAAW;AAGjC,UAAUC,YAAYA,CAAA,EACtB;EAEI,MAAMH,SAAS,CAACC,OAAO,CAACG,cAAc,EAAE,WAAWC,OAAO,EAC1D;IAEI,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMT,IAAI,CAAC,MACxBK,SAAS,CAACK,WAAW,CAACF,OAAO,CACjC,CAAC;MAED,MAAMN,GAAG,CAAC;QACNS,IAAI,EAAEP,OAAO,CAACQ,sBAAsB;QACpCJ,OAAO,EAAEC,QAAQ,CAACI;MACtB,CAAC,CAAC;IAEN,CAAC,CAAC,OAAOC,KAAK,EAAE,CAEhB,CAAC,SAAS,CACV;EACJ,CAAC,CAAC;AAEN;AACA,UAAUC,YAAYA,CAAA,EACtB;EAEI,MAAMZ,SAAS,CAACC,OAAO,CAACY,cAAc,EAAE,WAAWR,OAAO,EAC1D;IACI,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMT,IAAI,CAAC,MACxBK,SAAS,CAACY,YAAY,CAACT,OAAO,CAClC,CAAC;MACD,MAAMN,GAAG,CAAC;QACNS,IAAI,EAAEP,OAAO,CAACc,sBAAsB;QACpCV,OAAO,EAAEC,QAAQ,CAACI;MACtB,CAAC,CAAC;IACN,CAAC,CAAC,OAAOC,KAAK,EAAE,CAEhB,CAAC,SAAS,CACV;EACJ,CAAC,CAAC;AACN;AAEA,eAAe,UAAUK,OAAOA,CAAA,EAChC;EACI,MAAMpB,GAAG,CAAC,CACNE,IAAI,CAACK,YAAY,CAAC,EAClBL,IAAI,CAACc,YAAY;EACjB;EAAA,CACH,CAAC;AACN;AAACK,EAAA,GAPwBD,OAAO;AAAA,IAAAC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}